// Mocks generated by Mockito 5.4.0 from annotations
// in planetology/test/model/service/my_service_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;

import 'package:dio/dio.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;
import 'package:planetology/model/astro_model.dart' as _i3;
import 'package:planetology/model/planet_model.dart' as _i6;
import 'package:planetology/model/service/my_service.dart' as _i4;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeDio_0 extends _i1.SmartFake implements _i2.Dio {
  _FakeDio_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeDateTime_1 extends _i1.SmartFake implements DateTime {
  _FakeDateTime_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeAstroModel_2 extends _i1.SmartFake implements _i3.AstroModel {
  _FakeAstroModel_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [MyService].
///
/// See the documentation for Mockito's code generation for more information.
class MockMyService extends _i1.Mock implements _i4.MyService {
  MockMyService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.Dio get dio => (super.noSuchMethod(
        Invocation.getter(#dio),
        returnValue: _FakeDio_0(
          this,
          Invocation.getter(#dio),
        ),
      ) as _i2.Dio);
  @override
  DateTime get date => (super.noSuchMethod(
        Invocation.getter(#date),
        returnValue: _FakeDateTime_1(
          this,
          Invocation.getter(#date),
        ),
      ) as DateTime);
  @override
  set date(DateTime? _date) => super.noSuchMethod(
        Invocation.setter(
          #date,
          _date,
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i5.Future<List<_i6.PlanetModel>> fetchPlanet() => (super.noSuchMethod(
        Invocation.method(
          #fetchPlanet,
          [],
        ),
        returnValue:
            _i5.Future<List<_i6.PlanetModel>>.value(<_i6.PlanetModel>[]),
      ) as _i5.Future<List<_i6.PlanetModel>>);
  @override
  _i5.Future<_i3.AstroModel> fetchAstroDay() => (super.noSuchMethod(
        Invocation.method(
          #fetchAstroDay,
          [],
        ),
        returnValue: _i5.Future<_i3.AstroModel>.value(_FakeAstroModel_2(
          this,
          Invocation.method(
            #fetchAstroDay,
            [],
          ),
        )),
      ) as _i5.Future<_i3.AstroModel>);
}
